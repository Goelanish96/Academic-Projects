---
title: "BANA7050_Final_Project"
author: "Anish Goel"
format: 
  html:
    embed-resources: true
editor: visual
---
::: panel-tabset
## Time Series decomposition and EDA

```{r message=FALSE, warning=FALSE, include=FALSE}
library(tidyverse)
library(rmarkdown)
library(gapminder)
library(janitor)
library(lubridate)
library(scales)
library(gt)
library(patchwork)
library(kableExtra)
library(data.table)
library(corrplot)
library(zoo)
library(forecast)
library(fable)
library(feasts)
library(tsibble)
library(tseries)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(prophet)

birth_rate <- read.csv("C:/Users/goela/Downloads/birth-rate-crude-per-1-000-people/Birth rate, crude (per 1,000 people).csv")
attach(birth_rate)
birth_rate <- birth_rate %>%
  filter(Country.Name == 'India') %>%
  select(1,3,5,6,7) %>%
  pivot_wider(names_from = Indicator.Name, values_from = Value)
birth_rate <- birth_rate %>%
  select(1,2,4)
colnames(birth_rate)[3] <- 'annual_birth_rate'
birth_rate <- birth_rate %>%
  select(2,3) %>%
  arrange(Year)

birth_rate_1 <- birth_rate %>%
  filter(Year <= 2002) %>%
  mutate(
    birth_rate_log = log1p(annual_birth_rate),
    birth_rate_boxcox = forecast::BoxCox(annual_birth_rate, lambda = "auto")
  ) %>%
  mutate(birth_rate_log_diff = birth_rate_log - lag(birth_rate_log),
         birth_rate_boxcox_diff = birth_rate_boxcox - lag(birth_rate_boxcox)) %>%
  as_tsibble(index = Year)

birth_rate_prophet12 <- birth_rate %>%
  rename(ds = Year, y = annual_birth_rate)

birth_rate_train1 <- birth_rate_prophet12 %>%
  filter(ds < 2002) %>%
  as_tsibble(index = ds)

birth_rate_test1 <- birth_rate_prophet12 %>%
  filter(ds>= 2002) %>%
  as_tsibble(index = ds)

birth_rate$Year <- as.Date('0000-01-01') + years(birth_rate$Year)

birth_rate_prophet <- birth_rate %>%
  rename(ds = Year, y = annual_birth_rate)

# Train set
birth_rate_train <- birth_rate_prophet %>%
  filter(ds < ymd("2002-01-01"))

# Test set
birth_rate_test <- birth_rate_prophet %>%
  filter(ds >= ymd("2002-01-01"))

# Train Model
birth_rate_prophet_model <- prophet(birth_rate_train, yearly.seasonality = FALSE)

# Creating Data frame for future predictions
birth_rate_prophet_future <- make_future_dataframe(birth_rate_prophet_model, periods = 24, freq = 'year')

# Five-point Forecast using Prophet Model
birth_rate_prophet_forecast <- predict(birth_rate_prophet_model,birth_rate_prophet_future)
# tail(birth_rate_prophet_forecast, n = 5)
```
::: panel-tabset
### Dataset Description

The data set used for this assignment is **"Birth Rate, crude(per 1000 people)"**, which is taken from The World bank's website. Crude birth rate indicates the number of live births occurring during the year, per 1,000 population estimated at midyear. The data is published from Census reports and other statistical publications from national statistical offices of the respective countries. The variation in the feature is caused by a lot of factors such as **Contraceptive prevalence, Fertility rate, Life expectancy at birth, Mean age at first marriage etc**.

### Summary Statistics of the Data

```{r echo=FALSE, message=FALSE, warning=FALSE}
print('The Summary stastics for Annual birth rate is as follows:')
summary(birth_rate_train$y) 
cat('\n')
sd <- sd(birth_rate_train$y)
cat("The standard deviation for the Annual birth rate is", sd,".")
cat("There are no potential outliers in our data as it is a decreasing trend with no abnormality present.")
```

### Summary Visualization

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
hist <- birth_rate %>%
  ggplot() +
  ggtitle("Frequency Plot") +
  geom_histogram(aes(annual_birth_rate)) +
  theme_bw()

dens <- birth_rate %>%
  ggplot() +
  ggtitle("Dnesity Plot") +
  geom_density(aes(annual_birth_rate)) +
  theme_bw()

boxplot <- birth_rate %>%
  ggplot() +
  ggtitle("Boxplot") +
  geom_boxplot(aes("", annual_birth_rate)) +
  theme_bw()
hist + dens + boxplot
```

The Frequency plot or the histogram shows the frequency of Annual Birth Rate in different bins. The Density plot shows the distribution of data over the range of Annual Birth Rate. The Boxplot shows the distribution of Annual Birth rate in different quantiles with the middle line as the mean of the data.

### Time Series Decomposition

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_decomp <- birth_rate_train %>%
  mutate(
    ma_7_center = rollapply(
      y,
      7,
      FUN = mean,
      align = "center", fill = NA
    )
  ) %>%
  mutate(resid = y - ma_7_center) %>%
  select(ds, y, ma_7_center, resid)

birth_rate_decomp_plot <- birth_rate_decomp %>%
  pivot_longer(
    y:resid,
    names_to = "decomposition",
    values_to = "y"
  ) %>%
  mutate(
    decomposition = case_when(
      decomposition == "y" ~ "Annual Birth Rate",
      decomposition == "ma_7_center" ~ "Trend",
      decomposition == "resid" ~ "Remainder"
    )
  ) %>%
  mutate(
    decomposition = factor(
      decomposition,
      labels = c(
        "Annual Birth Rate",
        "Trend",
        "Remainder"
      ),
      levels = c(
        "Annual Birth Rate",
        "Trend",
        "Remainder"
      )
    )
  ) %>%
  ggplot() +
  geom_line(aes(ds, y), size = 1) +
  facet_wrap(
    ~decomposition,
    nrow = 3,
    scales = "free"
  ) +
  theme_bw() +
  ylab("Birth Rate") +
  xlab("Year") +
  ggtitle(
    "Annual Birth Rate = Trend + Remainder"
  )

birth_rate_decomp_plot
```

By sheer visualization the **remainder appears to be white noise** and the moving average seems to capture all the trend of our time-series. However, we will check the correlation between our variable and its lag values to see if the remainder is actually white noise.

### Moving Average Auto-correlation plot

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_decomp_lag <- birth_rate_decomp %>%
  drop_na() %>%
  mutate(across(where(is.numeric), list(lag = lag))) %>%
  select(
    ds, y, y_lag,
    ma_7_center, ma_7_center_lag, resid, resid_lag
  )

birth_rate_decomp_auto <- birth_rate_decomp_lag %>%
  drop_na()

cor_rate <- round(cor(birth_rate_decomp_auto$y_lag, birth_rate_decomp_auto$y), 2)
cor_ma <- round(cor(birth_rate_decomp_auto$ma_7_center_lag, birth_rate_decomp_auto$ma_7_center), 2)
cor_resid <- round(cor(birth_rate_decomp_auto$resid_lag, birth_rate_decomp_auto$resid), 2)

rate_plot <- birth_rate_decomp_auto %>%
  ggplot() +
  geom_point(aes(y_lag, y)) +
  geom_smooth(aes(y_lag, y), method = "lm", se = F) +
  labs(
    title = "Annual Birth Rate",
    subtitle = paste("Cor = ", cor_rate)
  ) +
  theme_bw()+
  ylab('Annual Birth Rate')+
  xlab('Annual Birth Rate (Lag)')

ma_7_center_plot <- birth_rate_decomp_auto %>%
  ggplot() +
  geom_point(aes(ma_7_center_lag, ma_7_center)) +
  geom_smooth(aes(ma_7_center_lag, ma_7_center), method = "lm", se = F) +
  labs(
    title = "Moving Average",
    subtitle = paste("Cor = ", cor_ma)
  ) +
  theme_bw()+
  ylab('Moving Average')+
  xlab('Moving Average (Lag)')

resid_plot <- birth_rate_decomp_auto %>%
  ggplot() +
  geom_point(aes(resid_lag, resid)) +
  geom_smooth(aes(resid_lag, resid), method = "lm", se = F) +
  labs(
    title = "Remainder",
    subtitle = paste("Cor = ", cor_resid)
  ) +
  theme_bw()+
  ylab('Remainder')+
  xlab('Remainder (Lag)')

rate_plot + ma_7_center_plot + resid_plot
```

We can observe that there is a lot of auto-correlation still present in our remainder which signifies that the **remainder is not white noise**. This implicates that there are other dynamics that we would want to model. Also, we know that annual data typically does not contain any seasonality and hence we would not be using a classical decomposition method or the STL decomposition as it would try to depict seasonality which is clearly not present in our data.
:::
## Arima Modeling
::: panel-tabset
### Rolling Average

```{r message=FALSE, warning=FALSE, include=FALSE}
birth_rate_roll <- birth_rate_train %>%
  mutate(
    birth_rate_mean = rollapply(y, width = 7, FUN =mean, fill = NA, align = 'center'),
    birth_rate_sd = rollapply(y, width = 7, FUN = sd, fill = NA, align = 'center')
  )
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_roll_mean <- birth_rate_roll %>%
  ggplot() +
  geom_line(aes(ds, birth_rate_mean), size= 2) +
  geom_smooth(aes(ds, birth_rate_mean),method = 'lm', se = F, color = 'red', size = 1.2) +
  theme_bw() +
  ylab("% Annual Birth Rate") +
  xlab("Year") +
  ggtitle("Annual Birth Rate Mean over time(7 year rolling window)")
birth_rate_roll_mean
```

We can clearly see that this a **mean non-stationary time-series** as the center-aligned moving average is also following a downward trend.

### Rolling Standard Deviation

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_roll_sd <- birth_rate_roll %>%
  ggplot() +
  geom_line(aes(ds, birth_rate_sd), size= 2) +
  geom_smooth(aes(ds, birth_rate_sd), method = 'lm', se = F, color = 'red', size = 1.2) +
  theme_bw() +
  ylab("% Annual Birth Rate") +
  xlab("Year") +
  ggtitle("Annual Birth Rate SD over time(7 year rolling window)")
birth_rate_roll_sd
```

We can clearly see that this a **variance non-stationary time-series**.

```{r message=FALSE, warning=FALSE, include=FALSE}
birth_rate_trans <- birth_rate_train %>%
  mutate(
    birth_rate_log = log1p(y),
    birth_rate_boxcox = forecast::BoxCox(y, lambda = "auto")
  ) %>%
  as_tsibble(index = ds)
```

### Log and Box-Cox Transformation

```{r message=FALSE, warning=FALSE, include=FALSE}
birth_rate_diff <- birth_rate_trans %>%
  mutate(birth_rate_log_diff = birth_rate_log - lag(birth_rate_log),
         birth_rate_boxcox_diff = birth_rate_boxcox - lag(birth_rate_boxcox))%>%
  as_tsibble(index = ds)
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_trans3 <- birth_rate_diff %>%
  ggplot() +
  geom_line(aes(ds, birth_rate_log_diff), color = 'red', size = 1.5) +
#  geom_smooth(aes(Year, birth_rate_log_diff), method = 'lm', se = F) +
  theme_bw() +
  ylab("Log Transformed and First differenced Annual Birth Rate") +
  xlab("Year") 
  
birth_rate_trans4 <- birth_rate_diff %>%
  ggplot() +
  geom_line(aes(ds, birth_rate_boxcox_diff), color = 'red', size = 1.5) +
#  geom_smooth(aes(Year, birth_rate_boxcox_diff), method = 'lm', se = F) +
  theme_bw() +
  ylab("Box-Cox Transformed and First differenced Annual Birth Rate") +
  xlab("Year")

birth_rate_trans3 + birth_rate_trans4
```

Our Box-Cox transformation seems to have less variability. We will conduct KPSS test to check for further stationarity.

### KPSS Test

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
log_diff_kpss <- birth_rate_diff %>%
  features(birth_rate_log_diff, unitroot_kpss)
log_diff_kpss
```

The p-value for the test on log transformed and first differenced value is 0.01 which is less than 0.05 which signifies that we cannot reject our null-hypothesis and hence our time-series is still **mean non-stationary.**

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
boxcox_diff_kpss <- birth_rate_diff %>%
  features(birth_rate_boxcox_diff, unitroot_kpss)
boxcox_diff_kpss
```

The p-value for the test on box-cox transformed value is 0.08 which is greater than 0.05 which signifies that we can reject our null-hypothesis and hence our time-series is **mean non-stationary.**

We will thus move forward with our **box-cox transformed and first differenced time-series.**


### ACF/PACF plots and Interpretation

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true



a <- acf(birth_rate_diff$birth_rate_boxcox_diff,lag.max=15,na.action=na.pass,plot=FALSE)
plot(a,main=" ")
b <- pacf(birth_rate_diff$birth_rate_boxcox_diff,lag.max=15,na.action=na.pass,plot=FALSE)
plot(b,main=" ")

```

We observe that ACF shows dampening auto-correlation and there are two significant lags in our PACF plot which indicates this to be an **AR(2) process.** However, we can also intuitively feel it to be an **MA(4) process**, as there is not an exactly perfect dampening. Also, there is **no seasonality** present in our data. We will test our ARIMA models for: **ARIMA(2,0,2), ARIMA(2,1,2), ARIMA(2,2,2), ARIMA(2,0,3), ARIMA(2,1,3), ARIMA(2,2,3), ARIMA(2,3,3), ARIMA(2,0,4), ARIMA(2,1,4), ARIMA(2,2,4), ARIMA(2,3,4), ARIMA(2,4,4)**

### Fitting Various ARIMA models

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
models_bic = birth_rate_1 %>%
  model(
    mod1 = ARIMA(birth_rate_boxcox_diff~pdq(2,0,2)+PDQ(0,0,0)),
    mod2 = ARIMA(birth_rate_boxcox_diff~pdq(2,1,2)+PDQ(0,0,0)),
    mod3 = ARIMA(birth_rate_boxcox_diff~pdq(2,2,2)+PDQ(0,0,0)),
    mod4 = ARIMA(birth_rate_boxcox_diff~pdq(2,0,3)+PDQ(0,0,0)),
    mod5 = ARIMA(birth_rate_boxcox_diff~pdq(2,1,3)+PDQ(0,0,0)),
    mod6 = ARIMA(birth_rate_boxcox_diff~pdq(2,2,3)+PDQ(0,0,0)),
    mod7 = ARIMA(birth_rate_boxcox_diff~pdq(2,3,3)+PDQ(0,0,0)),
    mod8 = ARIMA(birth_rate_boxcox_diff~pdq(2,0,4)+PDQ(0,0,0)),
    mod9 = ARIMA(birth_rate_boxcox_diff~pdq(2,1,4)+PDQ(0,0,0)),
    mod10 = ARIMA(birth_rate_boxcox_diff~pdq(2,2,4)+PDQ(0,0,0)),
    mod11 = ARIMA(birth_rate_boxcox_diff~pdq(2,3,4)+PDQ(0,0,0)),
    mod12 = ARIMA(birth_rate_boxcox_diff~pdq(2,4,4)+PDQ(0,0,0)),
  )



models_bic %>%
  glance() %>%
  arrange(BIC)
```

The best model as per our BIC value is **ARIMA(2,2,2).**

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
fit <- Arima(birth_rate_1$birth_rate_boxcox_diff,order=c(2,2,2))

plot(fit$x,col="white")
lines(fit$x,col="red", size = 2)
lines(fitted(fit),col="blue", size = 2)
```

**The in-sample predicted values tend to follow the trends in the data.**
:::
## Meta Prophet Model
::: panel-tabset
### Time-series Decomposition

```{r message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
prophet_plot_components(birth_rate_prophet_model,birth_rate_prophet_forecast)
```

Our Time-series does not contain any seasonality and hence we **plot the trend line** for time-series decomposition.

### Default Changepoint plot

```{r message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
plot(birth_rate_prophet_model,birth_rate_prophet_forecast)+
  add_changepoints_to_plot(birth_rate_prophet_model) +
  ylab("Annual Birth Rate") +
  xlab("Date") +
  theme_bw()
```

The **Dark red line** is our trend line and the **Dotted red line** represents the changepoints detected by our prophet model. The algorithm finally came up with **13 Changepoints** for our time-series.

This does not really make sense for our data by sheer visualization. We will make our model less flexible by decreasing number of changepoints or the changepoint scale, so that the model is not over-fitted.

### Changing the hyperparameters

```{r message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_prophet_model1 <- prophet(birth_rate_train, n.changepoints = 5,  changepoint.range = 0.9, changepoint.prior.scale = 0.04, yearly.seasonality =  FALSE)
birth_rate_prophet_future1 <- make_future_dataframe(birth_rate_prophet_model1, periods = 24, freq = 'year')
birth_rate_prophet_forecast1 <- predict(birth_rate_prophet_model1, birth_rate_prophet_future1)
plot(birth_rate_prophet_model1,birth_rate_prophet_forecast1)+
  add_changepoints_to_plot(birth_rate_prophet_model1) +
  ylab("Annual Birth Rate") +
  xlab("Date") +
  theme_bw()
```

### Setting Saturation Points and plotting a Logistic trend for forecasting

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_prophet_future2 <- make_future_dataframe(birth_rate_prophet_model, periods = 24, freq = 'year')

# Set "floor" in training data
birth_rate_train$floor = 10
birth_rate_train$cap = 50
birth_rate_prophet_future$floor = 10
birth_rate_prophet_future$cap = 50

# Set floor in forecast data
birth_rate_prophet_future2$floor = 10
birth_rate_prophet_future2$cap = 50
birth_rate_prophet_model2 <- prophet(birth_rate_train,growth = 'logistic', yearly.seasonality = FALSE)
birth_rate_prophet_forecast2 <- predict(birth_rate_prophet_model2, birth_rate_prophet_future2)

forecast_plot_data = birth_rate_prophet_forecast2 %>% 
  as_tibble() %>% 
  mutate(ds = as.Date(ds)) %>% 
  filter(ds>=ymd("2002-01-01") & ds <= ymd("2020-01-01"))

ggplot()+
geom_line(aes(birth_rate_test$ds,birth_rate_test$y))+
geom_line(aes(forecast_plot_data$ds,forecast_plot_data$yhat),color='red')+
theme_bw()+
ylab('Actual vs Predicted (Red)')+
xlab('Date')
```

We can see that **Logistic trend does not fit really well** for our time-series.
:::
## Model Comparison and Validation
::: panel-tabset
### Cross Validation
```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
df.cv <- cross_validation(birth_rate_prophet_model, initial = 7*365, period = 365, horizon = 5*365, units = 'days') %>%
  mutate(ds=year(ds))

df.cv %>% 
  ggplot() +
  geom_point(aes(ds,y)) +
  geom_line(aes(ds,yhat,color = factor(cutoff)),size = 1) +
  theme_bw() +
  ggtitle("Prophet Model CV") +
  xlab("Year") +
  ylab("Annual Birth rate") +
  scale_color_discrete(name = 'Cutoff')+
  ylim(20,30)
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birthrate_train_cv_data = birth_rate_train1 %>%
  stretch_tsibble(.init = 10, .step = 5)

birthrate_cv_forecast = birthrate_train_cv_data %>%
  model(naive = NAIVE(y),
  arima = ARIMA(y~pdq(2,2,2))) %>%
  forecast(h = 24)

birthrate_cv_forecast %>%
  autoplot(birthrate_train_cv_data)+
  facet_wrap(~.id,nrow=4)+
  theme_bw()+
  ggtitle('Naive and ARIMA CV') +
  ylab('Birth rate') +
  xlab('Year')
```

### Comparing RMSE

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birthrate_cv_forecast %>%
  group_by(.id,.model) %>%
  mutate(h = row_number()) %>%
  ungroup() %>%
  as_fable(response = "y", distribution = y) %>%
  accuracy(birth_rate_train1, by = c("h", ".model")) %>%
  ggplot(aes(x = h, y = RMSE,color=.model)) +
  geom_point()+
  geom_line()+
  theme_bw()+
  ylab('Average RMSE at Forecasting Intervals')+
  xlab('Years in the Future')
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
df.cv1 <- cross_validation(birth_rate_prophet_model, initial = 7*365, period = 365, horizon = 5*365, units = 'days')
plot_cross_validation_metric(df.cv1, metric = 'rmse') +
  ggtitle("RMSE of the prophet model") +
  ylim(0, 0.8)
```
From the RMSE, we can conclude that **Prophet model** is the best model.

### Final Model

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
birth_rate_prophet_model1 <- prophet(birth_rate_train, n.changepoints = 5,  changepoint.range = 0.9, changepoint.prior.scale = 0.04, yearly.seasonality =  FALSE)
birth_rate_prophet_future1 <- make_future_dataframe(birth_rate_prophet_model1, periods = 24, freq = 'year')
birth_rate_prophet_forecast1 <- predict(birth_rate_prophet_model1, birth_rate_prophet_future1)
plot(birth_rate_prophet_model1,birth_rate_prophet_forecast1)+
  ylab("Annual Birth Rate") +
  xlab("Date") +
  theme_bw()
```

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| echo: true
#| code-fold: true
tail(birth_rate_prophet_forecast2[,1:2])
```

**The forecast makes sense given the history of our data as there is a steady decline in annual birth rate.**
:::
:::